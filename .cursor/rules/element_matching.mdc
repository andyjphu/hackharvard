---
description: USE WHEN implementing element finding and action execution in agent systems
globs: **/*action*.py,**/*perception*.py
alwaysApply: true
---

When active, enforce:

## ELEMENT ID MATCHING (CRITICAL)

- Perception generates IDs like "AXButton_533.0_310.0" (role_x_y format)
- Action engine MUST use these exact IDs, not create new ones
- Use position-based matching with tolerance for element finding
- Parse IDs: split("\_") to get role, x, y coordinates
- Match elements: abs(pos.x - x) < 10 and abs(pos.y - y) < 10

## ELEMENT FINDING IMPLEMENTATION

```python
def _find_element_by_position(target_id, window):
    if "_" in target_id and target_id.count("_") >= 2:
        parts = target_id.split("_")
        role = parts[0]  # "AXButton"
        x = float(parts[1])  # 533.0
        y = float(parts[2])  # 310.0

        elements = window.findAllR(AXRole=role)
        for elem in elements:
            pos = getattr(elem, "AXPosition", None)
            if pos and abs(pos.x - x) < 10 and abs(pos.y - y) < 10:
                return elem
```

## PROMPT ENGINEERING FOR GEMINI

- ALWAYS include "USE THESE EXACT IDs" in reasoning prompts
- Show element list with IDs, types, positions, titles
- Force Gemini to use provided IDs, not generate new ones
- Example: "AVAILABLE UI ELEMENTS (USE THESE EXACT IDs): ..."

## ATOMACOS API USAGE

- Use getAppRefByLocalizedName("App Name") for specific apps
- Use getFrontmostApp() for current app
- Use findAllR(AXRole="AXButton") to find elements by role
- Check element properties: AXPosition, AXSize, AXTitle, AXEnabled

## COMMON MISTAKES TO AVOID

- DON'T assume elements have AXIdentifier attributes
- DON'T let Gemini generate its own element IDs
- DON'T use non-existent atomacos methods like getAppRefs()
- DON'T skip position tolerance in element matching
- DON'T forget to handle None values for element properties
